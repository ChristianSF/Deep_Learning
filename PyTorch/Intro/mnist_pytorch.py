# -*- coding: utf-8 -*-
"""MNIST_PyTorch

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_IM1PHIcyhlur2PtcLX-d71XtfdKejuz
"""

import numpy as np
import torch
import helper
import matplotlib.pyplot as plt

from torchvision import datasets, transforms

from six.moves import urllib
opener = urllib.request.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
urllib.request.install_opener(opener)

transform = transforms.Compose([transforms.ToTensor(),
                                transforms.Normalize((0.5,), (0.5,)),
                                ])

trainset = datasets.MNIST('MNIST_data/', download=True, train=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)

dataiter = iter(trainloader)
imagens, labels = dataiter.next()
print(type(imagens))
print(imagens.shape)
print(labels.shape)

plt.imshow(imagens[1].numpy().squeeze(), cmap= "Greys_r");

def ativacao(x):
  return 1/(1+torch.exp(-x))

inputs = imagens.view(imagens.shape[0], -1)

w1 = torch.randn(784, 256)
b1 = torch.randn(256)

w2 = torch.randn(256, 10)
b2 = torch.randn(10)

h = ativacao(torch.mm(inputs, w1) + b1)

saida = torch.mm(h, w2) + b2

print(saida.shape)
print(type(saida))

def softmax(x):
  return torch.exp(x)/torch.sum(torch.exp(x), dim=1).view(-1, 1)

probabilidades = softmax(saida)

print(probabilidades.shape)
print(probabilidades.sum(dim=1))

"""#Construindo Redes Neurais"""

from torch import nn

class Rede(nn.Module):
  def __init__(self):
    super().__init__()

    self.hidden = nn.Linear(784, 256)
    self.saida = nn.Linear(256, 10)

    self.sigmoid = nn.Sigmoid()
    self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
      x = self.hidden(x)
      x = self.sigmoid(x)
      x = self.saida(x)
      x = self.softmax(x)

      return x

modelo = Rede()
print(modelo)

import torch.nn.functional as F

class Nova_Rede(nn.Module):
  def __init__(self):
    super().__init__()

    self.hidden = nn.Linear(784, 256)
    self.saida = nn.Linear(256, 10)

  def forward(self, x):
    x = F.sigmoid(self.hidden(x))
    x = F.softmax(self.saida(x), dim=1)
    x = F.relu()

    return x

novo_modelo = Nova_Rede()
print(novo_modelo)

