# -*- coding: utf-8 -*-
"""IntroPyTorch

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aMxwMyA1OOvZArfJbDss0X9IQrGx0Qcd
"""

import torch

def activation(x):
  
  return 1/(1+torch.exp(-x))

torch.manual_seed(3)

features = torch.randn((1, 5))
weights = torch.rand_like(features)
bias = torch.randn((1, 1))

saida = activation(torch.sum(features * weights) + bias)
print(saida)

"""Exercise: Calculate the output of our little network using matrix multiplication."""

weights.view(1,5)

print(weights.view(5,1))

print(torch.mm(features, weights.view(5,1)))

saida = activation(torch.mm(features, weights.view(5,1)) + bias)
print(saida)

"""Gerando dados"""

torch.manual_seed(3)

features = torch.randn(1, 4)
n_input = features.shape[1]
n_hidden = 2
n_output = 1


w1 = torch.randn(n_input, n_hidden)
w2 = torch.randn(n_hidden, n_output)

b1 = torch.randn((1, n_hidden))
b2 = torch.randn((1, n_output))

h = activation(torch.mm(features, w1) + b1)
saida = activation(torch.mm(h, w2) + b2)
print(saida)

"""Usando Numpy"""

import numpy as np

a = np.random.rand(6,2)
print(a)

b = torch.from_numpy(a)
print(b)

print(b.numpy())

print(b.mul_(2))

print(a)